(**********************************************************************************************************************************************************************************************************************)
VAR CONSTANT
	MAX_SHUTTLES : USINT := 20; (*Max shuttles on the trak*)
	MAX_SHUTTLES_MIN_ONE : USINT := MAX_SHUTTLES-1; (*Max shuttles on the trak minus one*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	MC_BR_AsmPowerOn_0 : MC_BR_AsmPowerOn_AcpTrak; (*FUB to power on the assembly*)
	MC_BR_AsmPowerOff_0 : MC_BR_AsmPowerOff_AcpTrak; (*FUB to power off the assembly*)
	MC_BR_AsmDeleteShuttle_0 : MC_BR_AsmDeleteShuttle_AcpTrak; (*FUB to delete shuttles*)
	MC_BR_AsmReset_0 : MC_BR_AsmReset_AcpTrak; (*FUB to reset the assembly errors*)
	MC_BR_AsmStop_0 : MC_BR_AsmStop_AcpTrak; (*FUB to stop all shuttles on the assembly*)
	MC_BR_AsmReadInfo_0 : MC_BR_AsmReadInfo_AcpTrak; (*FUB to read assembly information*)
	MC_BR_SecAddShuttle_Main : MC_BR_SecAddShuttle_AcpTrak; (*FUB to add shuttles to the sector*)
	MC_BR_SecGetShuttle_0 : MC_BR_SecGetShuttle_AcpTrak; (*FUB to read all shuttle references*)
	MC_BR_ShSetUserID_0 : MC_BR_ShSetUserID_AcpTrak; (*FUB to set the UserID*)
	MC_BR_SecReadInfo_Seg08 : MC_BR_SecReadInfo_AcpTrak; (*FUB to read the sector info for SegSec_08*)
	MC_BR_ElasticMoveVel_0 : MC_BR_ElasticMoveVel_AcpTrak; (*FUB to move all shuttles elastic*)
	MC_BR_ShReadInfo_Main : ARRAY[0..MAX_SHUTTLES_MIN_ONE] OF MC_BR_ShReadInfo_AcpTrak; (*FUB to read the shuttle info*)
	MpAxisBasic_0 : MpAxisBasic; (*FUB to use a single axis*)
	AxisParams : MpAxisBasicParType; (*Parameter structure for MpAxisBasic*)
	MpAxisCyclicSet_0 : MpAxisCyclicSet; (*FUB to override cyclically values of the axis (velocity)*)
	CyclicSetParams : MpAxisCyclicSetParType; (*Parameter structure for MpAxisCyclicSet*)
	MC_BR_MoveCyclicTcpVel_0 : ARRAY[0..MAX_SHUTTLES_MIN_ONE] OF MC_BR_MoveCyclicTcpVel_AcpTrak; (*FUB to move shuttles cyclic velocity*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	State : StateEnum; (*Main state*)
	ErrorInfo : STRING[80]; (*Error information*)
	SimActive : BOOL; (*Simulation active flag*)
	StateAxis : StateAxisEnum; (*Axis state*)
	Start : BOOL; (*Start command*)
	Stop : BOOL; (*Stop command*)
	Halt : BOOL; (*Halt command*)
	AutomaticVelocityAdjustment : BOOL; (*Automatic velocity adjustment mode*)
	AutomaticVelocityAdjNotActive : BOOL; (*Automatic velocity adjustment not active --> mappView*)
	ErrorReset : BOOL; (*Error reset command*)
	ConveyorVelocity : REAL; (*Cyclic velocity for the conveyor and shuttles on the conveyor*)
	Shuttle : ARRAY[0..MAX_SHUTTLES_MIN_ONE] OF McAxisType; (*Shuttle objects*)
	ShuttleInitData : ShuttleInitDataType; (*Initial shuttle data, Position, ID*)
	NrOfShuttles : UINT; (*Number of shuttles on the system*)
	Velocity : REAL; (*Global velocity for the trak*)
	Acceleration : REAL; (*Global acceleration*)
	Deceleration : REAL; (*Global deceleration*)
	EnableStations : BOOL; (*All stations are enabled*)
	StartAxisMovement : BOOL; (*Start the cyclic movement of the axis*)
	StopConveyor : BOOL; (*Flag to stop the conveyor*)
	Paused : BOOL; (*Paused flag*)
	UserIDSet : BOOL; (*Flag to check if UserID is already set*)
	Cnt : USINT; (*Counter*)
	ShIndex : SINT; (*Shuttle index*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	EntryState : EntryStateEnum; (*Entry state (Exit conveyor)*)
	EntryShuttle : McAxisType; (*Shuttle entered the trak*)
	VirtShID : UDINT; (*Virtual shuttle ID of the entered shuttle*)
	ShVelocity : REAL; (*Velocity of the shuttle (for simulation)*)
	MC_BR_TrgPointEnable_Entry : MC_BR_TrgPointEnable_AcpTrak; (*FUB to get Trigger events*)
	MC_BR_TrgPointReadInfo_Entry : MC_BR_TrgPointReadInfo_AcpTrak; (*FUB to read shuttle from trigger event*)
	MC_BR_ShReadInfo_Entry : MC_BR_ShReadInfo_AcpTrak; (*FUB to read shuttle information*)
	MC_BR_SegReadInfo_Entry : MC_BR_SegReadInfo_AcpTrak; (*FUB to read segment information*)
	MC_BR_SecReadInfo_SimSector : MC_BR_SecReadInfo_AcpTrak; (*FUB to read sector information*)
	MC_BR_SecAddShuttle_0 : MC_BR_SecAddShuttle_AcpTrak; (*FUB to catch shuttle*)
	MC_BR_SecAddShuttle_1 : MC_BR_SecAddShuttle_AcpTrak; (*FUB to catch shuttle*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	ExitState : ExitStateEnum; (*Exit state (Entry conveyor)*)
	ExitShuttle : McAxisType; (*Shuttle exit the trak*)
	AddTicket : BOOL; (*Add ticket to the barrier*)
	MC_BR_TrgPointEnable_Exit : MC_BR_TrgPointEnable_AcpTrak; (*FUB to get Trigger events*)
	MC_BR_TrgPointReadInfo_Exit : MC_BR_TrgPointReadInfo_AcpTrak; (*FUB to read shuttle from trigger event*)
	MC_BR_ShReadInfo_Exit : MC_BR_ShReadInfo_AcpTrak; (*FUB to read shuttle information*)
	MC_BR_BarrierCmd_Exit : MC_BR_BarrierCommand_AcpTrak; (*FUB to control the barrier*)
	MC_BR_BarrierReadInfo_Exit : MC_BR_BarrierReadInfo_AcpTrak; (*FUB to read the barrier information*)
	MC_BR_SecReadInfo_CheckFree : MC_BR_SecReadInfo_AcpTrak; (*FUB to check if the segment behind the barrier is free*)
	MC_BR_TrgPointEnable_CheckFree : MC_BR_TrgPointEnable_AcpTrak; (*FUB to get Trigger events if shuttle distance is high enough*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	ClearState : ClearStateEnum; (*Clear state*)
	ClearShuttle : McAxisType; (*Shuttle at the clear station*)
	MC_BR_TrgPointEnable_Clear : MC_BR_TrgPointEnable_AcpTrak; (*FUB to get Trigger events*)
	MC_BR_TrgPointReadInfo_Clear : MC_BR_TrgPointReadInfo_AcpTrak; (*FUB to read shuttle from trigger event*)
	MC_BR_ElasticMoveVel_Clear : MC_BR_ElasticMoveVel_AcpTrak; (*FUB to move elastic velocity*)
	Index : USINT; (*Index counter variable*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	Message : STRING[80]; (*Message to add to the list*)
	Messages : ARRAY[0..19] OF STRING[80]; (*Messages for the visu*)
	ImageIndex : ARRAY[0..19] OF USINT; (*Image index for the visu*)
	AddMessage : BOOL; (*Add the new message to the list*)
	AddImage : USINT; (*Add the new image to the list*)
	Timestamps : ARRAY[0..19] OF DATE_AND_TIME; (*List with timestamps for the visu*)
	DTGetTime_0 : DTGetTime; (*FUB to read the timestamp*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	AddShuttleState : AddShuttleStateEnum; (*State enum for adding the shuttle*)
	AddShuttle : BOOL; (*Add a shuttle to the trak*)
	OpenBarrier : BOOL; (*Open the barrier*)
	AddPosition : LREAL; (*Position where the shuttle should be added*)
	ConfirmShuttleAdded : BOOL; (*On the PLC, confirm that the shuttles are placed on the assembly*)
	UserID : STRING[32]; (*UserID of the added shuttle*)
	MC_BR_SecAddShuttle_AddShuttle : MC_BR_SecAddShuttle_AcpTrak; (*FUB to add a shuttle*)
	MC_BR_SecReadInfo_AddShuttle : MC_BR_SecReadInfo_AcpTrak; (*FUB to read sector info*)
	MC_BR_BarrierCmd_AddShuttle : MC_BR_BarrierCommand_AcpTrak; (*FUB to control the barrier*)
	MC_BR_SegPowerOff_AddShuttle : MC_BR_SegPowerOff_AcpTrak; (*FUB to power off the segment*)
	MC_BR_SegPowerOn_AddShuttle : MC_BR_SegPowerOn_AcpTrak; (*FUB to power on the segment*)
	MC_BR_SecGetShuttle_AddShuttle : MC_BR_SecGetShuttle_AcpTrak; (*FUB to read the shuttles on the sector*)
	MC_BR_ShSetUserID_AddShuttle : MC_BR_ShSetUserID_AcpTrak; (*FUB to set the UserID*)
	MC_BR_ElasticMoveVel_AddShuttle : MC_BR_ElasticMoveVel_AcpTrak; (*FUB to move the shuttle*)
	AddedShuttle : McAxisType; (*Shuttle reference that is read*)
	BarrierClosed_AddShuttle : BOOL; (*Barrier closed, used for mappView to enable confirm button*)
	AxisOld : McAxisType; (*Temp variable to check controlif changed*)
END_VAR
(**********************************************************************************************************************************************************************************************************************)
VAR
	MC_BR_ShReadInfo_Calc : MC_BR_ShReadInfo_AcpTrak; (*FUB to read the shuttle info*)
	CalcShuttle : McAxisType; (*Shuttle reference of the last catched shuttle*)
	OldShuttle_Calc : McAxisType; (*Old shuttle reference to check if new one is available*)
END_VAR
